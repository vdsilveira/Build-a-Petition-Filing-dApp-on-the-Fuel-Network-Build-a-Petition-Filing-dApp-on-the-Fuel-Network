import type { BytesLike } from '@ethersproject/bytes';
import type { JsonAbi, InputValue } from '@fuel-ts/abi-coder';
import { Interface } from '@fuel-ts/abi-coder';
import type { AbstractPredicate } from '@fuel-ts/interfaces';
import type { CallResult, Provider, TransactionRequestLike, TransactionResponse } from '@fuel-ts/providers';
import { Account } from '@fuel-ts/wallet';
/**
 * `Predicate` provides methods to populate transaction data with predicate information and sending transactions with them.
 */
export declare class Predicate<ARGS extends InputValue[]> extends Account implements AbstractPredicate {
    bytes: Uint8Array;
    predicateData: Uint8Array;
    interface?: Interface;
    /**
     * Creates an instance of the Predicate class.
     *
     * @param bytes - The bytes of the predicate.
     * @param chainId - The chain ID for which the predicate is used.
     * @param provider - The provider used to interact with the blockchain.
     * @param jsonAbi - The JSON ABI of the predicate.
     * @param configurableConstants - Optional configurable constants for the predicate.
     */
    constructor(bytes: BytesLike, provider: Provider, jsonAbi?: JsonAbi, configurableConstants?: {
        [name: string]: unknown;
    });
    /**
     * Populates the transaction data with predicate data.
     *
     * @param transactionRequestLike - The transaction request-like object.
     * @returns The transaction request with predicate data.
     */
    populateTransactionPredicateData(transactionRequestLike: TransactionRequestLike): import("@fuel-ts/providers").TransactionRequest;
    /**
     * Sends a transaction with the populated predicate data.
     *
     * @param transactionRequestLike - The transaction request-like object.
     * @returns A promise that resolves to the transaction response.
     */
    sendTransaction(transactionRequestLike: TransactionRequestLike): Promise<TransactionResponse>;
    /**
     * Simulates a transaction with the populated predicate data.
     *
     * @param transactionRequestLike - The transaction request-like object.
     * @returns A promise that resolves to the call result.
     */
    simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult>;
    /**
     * Sets data for the predicate.
     *
     * @param args - Arguments for the predicate function.
     * @returns The Predicate instance with updated predicate data.
     */
    setData<T extends ARGS>(...args: T): this;
    /**
     * Processes the predicate data and returns the altered bytecode and interface.
     *
     * @param bytes - The bytes of the predicate.
     * @param jsonAbi - The JSON ABI of the predicate.
     * @param configurableConstants - Optional configurable constants for the predicate.
     * @returns An object containing the new predicate bytes and interface.
     */
    private static processPredicateData;
    /**
     * Sets the configurable constants for the predicate.
     *
     * @param bytes - The bytes of the predicate.
     * @param configurableConstants - Configurable constants to be set.
     * @param abiInterface - The ABI interface of the predicate.
     * @returns The mutated bytes with the configurable constants set.
     */
    private static setConfigurableConstants;
}
//# sourceMappingURL=predicate.d.ts.map