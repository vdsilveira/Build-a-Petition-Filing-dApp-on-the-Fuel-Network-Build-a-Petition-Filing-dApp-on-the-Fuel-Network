import type { BN } from '@fuel-ts/math';
import type { Witness } from '@fuel-ts/transactions';
import { TransactionType } from '@fuel-ts/transactions';
import type { TransactionResultReceipt } from '../transaction-response';
/** @hidden */
export declare const calculatePriceWithFactor: (gasUsed: BN, gasPrice: BN, priceFactor: BN) => BN;
/** @hidden */
export declare const getGasUsedFromReceipts: (receipts: Array<TransactionResultReceipt>) => BN;
/**
 * @hidden
 */
export interface CalculateTransactionFeeForScriptParams {
    receipts: TransactionResultReceipt[];
    gasPrice: BN;
    gasPriceFactor: BN;
    margin?: number;
}
/** @hidden */
export declare const calculateTransactionFeeForScript: (params: CalculateTransactionFeeForScriptParams) => {
    fee: BN;
    gasUsed: BN;
};
/** @hidden */
export interface CalculateTransactionFeeForContractCreatedParams {
    gasPrice: BN;
    transactionBytes: Uint8Array;
    transactionWitnesses: Witness[];
    gasPriceFactor: BN;
    gasPerByte?: BN;
}
/** @hidden */
export declare const calculateTransactionFeeForContractCreated: (params: CalculateTransactionFeeForContractCreatedParams) => {
    fee: BN;
    gasUsed: BN;
};
export interface CalculateTransactionFeeParams {
    receipts: TransactionResultReceipt[];
    gasPrice: BN;
    margin?: number;
    transactionBytes: Uint8Array;
    transactionWitnesses: Witness[];
    transactionType: TransactionType;
    gasPriceFactor: BN;
    gasPerByte?: BN;
}
/** @hidden */
export declare const calculateTransactionFee: ({ receipts, gasPrice, gasPriceFactor, gasPerByte, transactionBytes, transactionType, transactionWitnesses, margin, }: CalculateTransactionFeeParams) => {
    fee: BN;
    gasUsed: BN;
};
//# sourceMappingURL=fee.d.ts.map