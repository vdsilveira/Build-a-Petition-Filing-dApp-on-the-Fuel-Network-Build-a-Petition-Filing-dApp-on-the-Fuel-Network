{"version":3,"sources":["../../../node_modules/.pnpm/minimalistic-assert@1.0.1/node_modules/minimalistic-assert/index.js","../../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js","../../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/utils.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/common.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/common.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/1.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/256.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/224.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/512.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/384.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/ripemd.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/hmac.js","../../../node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js","../src/common/common.ts","../../../node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/src.ts/browser-sha2.ts","../../../node_modules/.pnpm/@ethersproject+logger@5.7.0/node_modules/@ethersproject/logger/src.ts/_version.ts","../../../node_modules/.pnpm/@ethersproject+logger@5.7.0/node_modules/@ethersproject/logger/src.ts/index.ts","../../../node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/src.ts/_version.ts","../../../node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/src.ts/index.ts","../../../node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/src.ts/_version.ts","../src/common/cryptography.ts","../src/binary/types/node.ts","../src/binary/binaryMerkleTree.ts","../src/sparse/treeHasher.ts","../src/sparse/types/sparseCompactMerkleProof.ts","../src/sparse/types/sparseMerkleProof.ts","../src/sparse/utils.ts","../src/sparse/proofs.ts","../src/sparse/sparseMerkleTree.ts"],"sourcesContent":["module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","try {\n  var util = require('util');\n  /* istanbul ignore next */\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  /* istanbul ignore next */\n  module.exports = require('./inherits_browser.js');\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\n\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const MAX_HEIGHT = 256;\n","\"use strict\";\n\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nimport { SupportedAlgorithm } from \"./types\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport function ripemd160(data: BytesLike): string {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha256(data: BytesLike): string {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha512(data: BytesLike): string {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function computeHmac(algorithm: SupportedAlgorithm, key: BytesLike, data: BytesLike): string {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n\n    return \"0x\" + hash.hmac((<any>hash)[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n\n","export const version = \"logger/5.7.0\";\n","\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nimport { version } from \"./_version\";\n\nlet _globalLogger: Logger = null;\n\nfunction _checkNormalize(): string {\n    try {\n        const missing: Array<string> = [ ];\n\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                };\n            } catch(error) {\n                missing.push(form);\n            }\n        });\n\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\")\n        }\n    } catch (error) {\n        return error.message;\n    }\n\n    return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n    DEBUG    = \"DEBUG\",\n    INFO     = \"INFO\",\n    WARNING  = \"WARNING\",\n    ERROR    = \"ERROR\",\n    OFF      = \"OFF\"\n}\n\n\nexport enum ErrorCode {\n\n    ///////////////////\n    // Generic Errors\n\n    // Unknown Error\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n    // Not Implemented\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n\n    // Some sort of bad response from the server\n    SERVER_ERROR = \"SERVER_ERROR\",\n\n    // Timeout\n    TIMEOUT = \"TIMEOUT\",\n\n    ///////////////////\n    // Operational  Errors\n\n    // Buffer Overrun\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n\n    ///////////////////\n    // Argument Errors\n\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW = \"MISSING_NEW\",\n\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n\n    ///////////////////\n    // Blockchain Errors\n\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\n\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\n\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\n\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\n\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\n\n\n    ///////////////////\n    // Interaction Errors\n\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ACTION_REJECTED = \"ACTION_REJECTED\",\n};\n\nconst HEX = \"0123456789abcdef\";\n\nexport class Logger {\n    readonly version: string;\n\n    static errors = ErrorCode;\n\n    static levels = LogLevel;\n\n    constructor(version: string) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n\n    _log(logLevel: LogLevel, args: Array<any>): void {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) { return; }\n        console.log.apply(console, args);\n    }\n\n    debug(...args: Array<any>): void {\n        this._log(Logger.levels.DEBUG, args);\n    }\n\n    info(...args: Array<any>): void {\n        this._log(Logger.levels.INFO, args);\n    }\n\n    warn(...args: Array<any>): void {\n        this._log(Logger.levels.WARNING, args);\n    }\n\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, { });\n        }\n\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\n        if (!params) { params = {}; }\n\n        const messageDetails: Array<string> = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                      hex += HEX[value[i] >> 4];\n                      hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${ code }`);\n        messageDetails.push(`version=${ this.version }`);\n\n        const reason = message;\n\n        let url = \"\";\n\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n\n                switch (fault) {\n                    case \"overflow\": case \"underflow\": case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\": case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n\n        // @TODO: Any??\n        const error: any = new Error(message);\n        error.reason = reason;\n        error.code = code\n\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n\n        return error;\n    }\n\n    throwError(message: string, code?: ErrorCode, params?: any): never {\n        throw this.makeError(message, code, params);\n    }\n\n    throwArgumentError(message: string, name: string, value: any): never {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n        if (!!condition) { return; }\n        this.throwError(message, code, params);\n    }\n\n    assertArgument(condition: any, message: string, name: string, value: any): void {\n        if (!!condition) { return; }\n        this.throwArgumentError(message, name, value);\n    }\n\n    checkNormalize(message?: string): void {\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n\n    checkSafeUint53(value: number, message?: string): void {\n        if (typeof(value) !== \"number\") { return; }\n\n        if (message == null) { message = \"value not safe\"; }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n\n    checkNew(target: any, kind: any): void {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    checkAbstract(target: any, kind: any): void {\n        if (target === kind) {\n            this.throwError(\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { name: target.name, operation: \"new\" }\n            );\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    static globalLogger(): Logger {\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\n        return _globalLogger;\n    }\n\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        if (_permanentCensorErrors) {\n            if (!censorship) { return; }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n\n    static setLogLevel(logLevel: LogLevel): void {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n\n    static from(version: string): Logger {\n        return new Logger(version);\n    }\n}\n","export const version = \"bytes/5.7.0\";\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n// Exported Types\n\nexport type Bytes = ArrayLike<number>;\n\nexport type BytesLike = Bytes | string;\n\nexport type DataOptions = {\n    allowMissingPrefix?: boolean;\n    hexPad?: \"left\" | \"right\" | null;\n};\n\nexport interface Hexable {\n    toHexString(): string;\n}\n\n\n/*\nexport interface HexString {\n    length: number;\n    substring: (start: number, end?: number) => string;\n\n    [index: number]: string;\n}\n*/\n\nexport type SignatureLike  = {\n    r: string;\n    s?: string;\n    _vs?: string,\n    recoveryParam?: number;\n    v?: number;\n} | BytesLike;\n\nexport interface Signature {\n    r: string;\n\n    s: string;\n    _vs: string,\n\n    recoveryParam: number;\n    v: number;\n\n    yParityAndS: string\n    compact: string;\n}\n\n///////////////////////////////\n\n\nfunction isHexable(value: any): value is Hexable {\n    return !!(value.toHexString);\n}\n\nfunction addSlice(array: Uint8Array): Uint8Array {\n    if (array.slice) { return array; }\n\n    array.slice = function() {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    }\n\n    return array;\n}\n\nexport function isBytesLike(value: any): value is BytesLike {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\n\nfunction isInteger(value: number) {\n    return (typeof(value) === \"number\" && value == value && (value % 1) === 0);\n}\n\nexport function isBytes(value: any): value is Bytes {\n    if (value == null) { return false; }\n\n    if (value.constructor === Uint8Array) { return true; }\n    if (typeof(value) === \"string\") { return false; }\n    if (!isInteger(value.length) || value.length < 0) { return false; }\n\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) { return false; }\n    }\n    return true;\n}\n\n\nexport function arrayify(value: BytesLike | Hexable | number, options?: DataOptions): Uint8Array {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) { result.push(0); }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { value = value.toHexString(); }\n\n    if (isHexString(value)) {\n        let hex = (<string>value).substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0\" + hex;\n            } else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nexport function concat(items: ReadonlyArray<BytesLike>): Uint8Array {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n\n    const result = new Uint8Array(length);\n\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n\n    return addSlice(result);\n}\n\nexport function stripZeros(value: BytesLike): Uint8Array {\n    let result: Uint8Array = arrayify(value);\n\n    if (result.length === 0) { return result; }\n\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) { start++ }\n\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n\n    return result;\n}\n\nexport function zeroPad(value: BytesLike, length: number): Uint8Array {\n    value = arrayify(value);\n\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\n\n\nexport function isHexString(value: any, length?: number): boolean {\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false\n    }\n    if (length && value.length !== 2 + 2 * length) { return false; }\n    return true;\n}\n\nconst HexCharacters: string = \"0123456789abcdef\";\n\nexport function hexlify(value: BytesLike | Hexable | number | bigint, options?: DataOptions): string {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n\n        if (hex.length) {\n            if (hex.length % 2) { hex = \"0\" + hex; }\n            return \"0x\" + hex;\n        }\n\n        return \"0x00\";\n    }\n\n    if (typeof(value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) { return (\"0x0\" + value); }\n        return \"0x\" + value;\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { return value.toHexString(); }\n\n    if (isHexString(value)) {\n        if ((<string>value).length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + (<string>value).substring(2);\n            } else if (options.hexPad === \"right\") {\n                value += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return (<string>value).toLowerCase();\n    }\n\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n             let v = value[i];\n             result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data: BytesLike) {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n\n    return (data.length - 2) / 2;\n}\n\nexport function hexDataSlice(data: BytesLike, offset: number, endOffset?: number): string {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data );\n    }\n\n    offset = 2 + 2 * offset;\n\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n\n    return \"0x\" + data.substring(offset);\n}\n\nexport function hexConcat(items: ReadonlyArray<BytesLike>): string {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\n\nexport function hexValue(value: BytesLike | Hexable | number | bigint): string {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") { return \"0x0\"; }\n    return trimmed;\n}\n\nexport function hexStripZeros(value: BytesLike): string {\n    if (typeof(value) !== \"string\") { value = hexlify(value); }\n\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") { offset++; }\n    return \"0x\" + value.substring(offset);\n}\n\nexport function hexZeroPad(value: BytesLike, length: number): string {\n    if (typeof(value) !== \"string\") {\n        value = hexlify(value);\n    } else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n\n    return value;\n}\n\nexport function splitSignature(signature: SignatureLike): Signature {\n\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n\n    if (isBytesLike(signature)) {\n        let bytes: Uint8Array = arrayify(signature);\n\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n\n        } else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        } else {\n\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n\n\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            } else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) { bytes[32] |= 0x80; }\n        result._vs = hexlify(bytes.slice(32, 64))\n\n    } else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1: 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            } else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            } else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            } else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            } else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        } else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            } else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v :(1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        } else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        } else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) { vs[0] |= 0x80; }\n        const _vs = hexlify(vs);\n\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        } else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n\n    return result;\n}\n\nexport function joinSignature(signature: SignatureLike): string {\n    signature = splitSignature(signature);\n\n    return hexlify(concat([\n         signature.r,\n         signature.s,\n         (signature.recoveryParam ? \"0x1c\": \"0x1b\")\n    ]));\n}\n\n","export const version = \"sha2/5.7.0\";\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\n\n/**\n * The primary hash function for Fuel\n * SHA-256\n */\nexport function hash(data: BytesLike): string {\n  return sha256(data);\n}\n","class Node {\n  left: number;\n  right: number;\n  parent: number;\n  hash: string;\n  data: string;\n  index: number;\n\n  constructor(\n    left: number,\n    right: number,\n    parent: number,\n    hash: string,\n    data: string,\n    index: number = 0\n  ) {\n    this.left = left;\n    this.right = right;\n    this.parent = parent;\n    this.hash = hash;\n    this.data = data;\n    this.index = index;\n  }\n}\n\nexport default Node;\n","// A set of useful helper methods for testing binary Merkle trees.\nimport { EMPTY, hash } from '../common';\n\nimport Node from './types/node';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n */\nexport function hashLeaf(data: string): string {\n  return hash('0x00'.concat(data.slice(2)));\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * hash(prefix +  left + right)\n */\nexport function hashNode(left: string, right: string): string {\n  return hash('0x01'.concat(left.slice(2)).concat(right.slice(2)));\n}\n\n/**\n * Construct tree\n */\nexport function constructTree(data: string[]): Node[] {\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    const leaf = new Node(-1, -1, -1, hashed, data[i]);\n    leaf.index = i;\n    nodes.push(leaf);\n  }\n\n  const nodesList = [...nodes];\n  let pNodes = [...nodes];\n\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n      const nextIndex = nodesList.length;\n      nodes[i].index = nextIndex;\n\n      nodesList[pNodes[j].index].parent = nextIndex;\n      nodesList[pNodes[j + 1].index].parent = nextIndex;\n      nodesList.push(nodes[i]);\n    }\n\n    if (size === 1) {\n      break;\n    }\n\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = [...nodes];\n  }\n  return nodesList;\n}\n\n/**\n * Compute the merkle root\n */\nexport function calcRoot(data: string[]): string {\n  if (!data.length) {\n    return EMPTY;\n  }\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    nodes.push(new Node(-1, -1, -1, hashed, data[i]));\n  }\n  let pNodes = nodes;\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n    }\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n    if (size === 1) {\n      break;\n    }\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = nodes;\n  }\n  return nodes[0].hash;\n}\n\n/**\n * Get proof for the leaf\n */\nexport function getProof(nodes: Node[], id: number): string[] {\n  const proof: string[] = [];\n  for (let prev = id, cur = nodes[id].parent; cur !== -1; prev = cur, cur = nodes[cur].parent) {\n    if (nodes[cur].left === prev) {\n      proof.push(nodes[nodes[cur].right].hash);\n    } else {\n      proof.push(nodes[nodes[cur].left].hash);\n    }\n  }\n  return proof;\n}\n","import { hash } from '../common';\n\nexport const leafPrefix = '0x00';\nexport const nodePrefix = '0x01';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encode\n * prefix + key + hash(data)\n */\nexport function hashLeaf(key: string, data: string): [string, string] {\n  const value = '0x00'.concat(key.slice(2)).concat(hash(data).slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * prefix + key + hash(data)\n */\nexport function hashNode(left: string, right: string): [string, string] {\n  const value = '0x01'.concat(left.slice(2)).concat(right.slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Parse a leaf\n */\nexport function parseLeaf(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Parse a nodes\n */\nexport function parseNode(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Check if data is a leaf by checking prefix\n */\nexport function isLeaf(data: string): boolean {\n  return data.slice(0, 4) === leafPrefix;\n}\n","class SparseCompactMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  BitMask: number[];\n  NumSideNodes: number;\n  SiblingData: string;\n\n  constructor(\n    SideNodes: string[],\n    NonMembershipLeafData: string,\n    Bitmask: number[],\n    NumSideNodes: number,\n    SiblingData: string\n  ) {\n    this.SideNodes = SideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.BitMask = Bitmask;\n    this.NumSideNodes = NumSideNodes;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseCompactMerkleProof;\n","// Sparse Merkle proof\nclass SparseMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  SiblingData: string;\n\n  constructor(sideNodes: string[], NonMembershipLeafData: string, SiblingData: string) {\n    this.SideNodes = sideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseMerkleProof;\n","export const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const MAX_HEIGHT = 256;\n\nexport interface MapStore {\n  [key: string]: string;\n}\n\n/**\n * Gets the bit at an offset from the most significant bit\n */\nexport function getBitAtFromMSB(data: string, position: number): number {\n  // if int(data[position / 8]) & (1 << (8 - 1 - uint(position) % 8)) > 0\n\n  // Slice off '0x'\n  const slicedData = data.slice(2);\n  // Get byte that contains the specified position\n  const byte = '0x'.concat(\n    slicedData.slice(Math.floor(position / 8) * 2, Math.floor(position / 8) * 2 + 2)\n  );\n  // Get bits from specified position within that byte\n  const bits = Number(byte) & (1 << (8 - 1 - (position % 8)));\n\n  // Bit at position = 0 IFF bits > 0.\n  if (bits > 0) {\n    return 1;\n  }\n  return 0;\n}\n/**\n * Reverse the nodes position\n */\nexport function reverseSideNodes(sideNodes: string[]): string[] {\n  let left = 0;\n  let right = sideNodes.length - 1;\n  const reversedSideNodes: string[] = sideNodes;\n\n  while (left < right) {\n    [reversedSideNodes[left], reversedSideNodes[right]] = [\n      reversedSideNodes[right],\n      reversedSideNodes[left],\n    ];\n    left += 1;\n    right -= 1;\n  }\n\n  return reversedSideNodes;\n}\n\n/**\n * Counts the common bit at at an offset from the most significant bit\n * between two inputs\n */\nexport function countCommonPrefix(data1: string, data2: string): number {\n  let count = 0;\n  for (let i = 0; i < MAX_HEIGHT; i += 1) {\n    if (getBitAtFromMSB(data1, i) === getBitAtFromMSB(data2, i)) {\n      count += 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n","import { hash } from '../common';\n\nimport { hashLeaf, hashNode, parseLeaf } from './treeHasher';\nimport SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport { getBitAtFromMSB, ZERO } from './utils';\n\n/**\n * Verify a merkle proof\n */\nexport function verifyProof(\n  proof: SparseMerkleProof,\n  root: string,\n  key: string,\n  value: string\n): [boolean, string[][]] {\n  const updates: string[][] = [[]];\n\n  // Detemine what the leaf hash should be\n  let currentHash;\n  let currentData;\n  let actualPath;\n  let valueHash;\n\n  if (value === ZERO) {\n    // Non-membership proof\n    if (proof.NonMembershipLeafData === '') {\n      currentHash = ZERO;\n    } else {\n      // leaf is an unrelated leaf\n      [actualPath, valueHash] = parseLeaf(proof.NonMembershipLeafData);\n      if (actualPath === key) {\n        // Leaf does exist : non-membership proof failed\n        return [false, []];\n      }\n      [currentHash, currentData] = hashLeaf(actualPath, valueHash);\n      updates.push([currentHash, currentData]);\n    }\n  } else {\n    // Membership proof\n    valueHash = hash(value);\n    updates.push([valueHash, value]);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    updates.push([currentHash, currentData]);\n  }\n\n  // Recompute root\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    const node = proof.SideNodes[i];\n\n    if (getBitAtFromMSB(key, proof.SideNodes.length - 1 - i) === 1) {\n      [currentHash, currentData] = hashNode(node, currentHash);\n    } else {\n      [currentHash, currentData] = hashNode(currentHash, node);\n    }\n\n    updates.push([currentHash, currentData]);\n  }\n\n  return [currentHash === root, updates];\n}\n\n/**\n * Compact a Sparse Merkle Proof using a bitmask\n */\nexport function compactProof(proof: SparseMerkleProof): SparseCompactMerkleProof {\n  const bitMask: number[] = [];\n  const compactedSideNodes: string[] = [];\n  let node;\n\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    node = proof.SideNodes[i];\n    if (node === ZERO) {\n      bitMask.push(0);\n    } else {\n      compactedSideNodes.push(node);\n      bitMask.push(1);\n    }\n  }\n  const compactedProof = new SparseCompactMerkleProof(\n    compactedSideNodes,\n    proof.NonMembershipLeafData,\n    bitMask,\n    proof.SideNodes.length,\n    proof.SiblingData\n  );\n  return compactedProof;\n}\n\n/**\n * Decompact a Sparse Merkle Proof\n */\nexport function decompactProof(proof: SparseCompactMerkleProof): SparseMerkleProof {\n  const decompactedSideNodes: string[] = [];\n  let position = 0;\n\n  for (let i = 0; i < proof.NumSideNodes; i += 1) {\n    if (proof.BitMask[i] === 0) {\n      decompactedSideNodes[i] = ZERO;\n    } else {\n      decompactedSideNodes[i] = proof.SideNodes[position];\n      position += 1;\n    }\n  }\n  const decompactedProof = new SparseMerkleProof(\n    decompactedSideNodes,\n    proof.NonMembershipLeafData,\n    proof.SiblingData\n  );\n\n  return decompactedProof;\n}\n","/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\nimport { hash } from '../common';\n\nimport { compactProof } from './proofs';\nimport { isLeaf, hashLeaf, hashNode, parseLeaf, parseNode } from './treeHasher';\nimport type SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport type { MapStore } from './utils';\nimport { ZERO, MAX_HEIGHT, getBitAtFromMSB, reverseSideNodes, countCommonPrefix } from './utils';\n\nexport class SparseMerkleTree {\n  ms: MapStore;\n\n  root: string;\n\n  constructor() {\n    const ms: MapStore = {};\n    this.ms = ms;\n    this.root = ZERO;\n    this.ms[this.root] = ZERO;\n  }\n\n  get(key: string): string {\n    return this.ms[key];\n  }\n\n  set(key: string, value: string): void {\n    this.ms[key] = value;\n  }\n\n  setRoot(root: string): void {\n    this.root = root;\n  }\n\n  sideNodesForRoot(key: string, root: string): [string[], string, string, string] {\n    const sideNodes: string[] = [];\n\n    // If the root is a placeholder, there are no sidenodes to return.\n    // The data is nil, and the sibling is nil\n    if (root === ZERO) {\n      return [sideNodes, ZERO, '', ''];\n    }\n\n    let currentData = this.get(root);\n\n    // If the root is a leaf, there are also no sidenodes to return.\n    // The data is the leaf data, and the sibling is nil\n    if (isLeaf(currentData)) {\n      return [sideNodes, root, currentData, ''];\n    }\n\n    let leftNode;\n    let rightNode;\n    let nodeHash = '';\n    let sideNode = '';\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      [leftNode, rightNode] = parseNode(currentData);\n\n      if (getBitAtFromMSB(key, i) === 1) {\n        sideNode = leftNode;\n        nodeHash = rightNode;\n      } else {\n        sideNode = rightNode;\n        nodeHash = leftNode;\n      }\n\n      sideNodes.push(sideNode);\n\n      // If the node is a placeholder, we've reached the end.\n      if (nodeHash === ZERO) {\n        currentData = '';\n        break;\n      }\n\n      currentData = this.get(nodeHash);\n\n      // If the node is a leaf, we've reached the end.\n      if (isLeaf(currentData)) {\n        break;\n      }\n    }\n\n    const siblingData = this.get(sideNode);\n\n    return [reverseSideNodes(sideNodes), nodeHash, currentData, siblingData];\n  }\n\n  deleteWithSideNodes(\n    key: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    // If value already zero, deletion changes nothing. Just return current root\n\n    if (oldLeafHash === ZERO) {\n      return this.root;\n    }\n\n    // If key is already empty (different key found in its place), deletion changed nothing. Just return current root\n    const [actualPath] = parseLeaf(oldLeafData);\n\n    if (actualPath !== key) {\n      return this.root;\n    }\n\n    let currentHash = '';\n    let currentData = '';\n    let sideNode = '';\n    let sideNodeValue = '';\n    let nonPlaceholderReached = false;\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] === '') {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      sideNode = sideNodes[i];\n\n      if (currentData === '') {\n        sideNodeValue = this.get(sideNode);\n\n        if (isLeaf(sideNodeValue)) {\n          // This is the leaf sibling that needs to be percolated up the tree.\n          currentHash = sideNode;\n          currentData = sideNode;\n          // eslint-disable-next-line no-continue\n          continue;\n        } else {\n          // This is the node sibling that needs to be left in its place.\n          currentData = ZERO;\n          nonPlaceholderReached = true;\n        }\n      }\n\n      if (!nonPlaceholderReached && sideNode === ZERO) {\n        // We found another placeholder sibling node, keep going up the\n        // tree until we find the first sibling that is not a placeholder.\n        // eslint-disable-next-line no-continue\n        continue;\n      } else if (!nonPlaceholderReached) {\n        // We found the first sibling node that is not a placeholder, it is\n        // time to insert our leaf sibling node here.\n        nonPlaceholderReached = true;\n      }\n\n      if (getBitAtFromMSB(key, sideNodes.length - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    // The tree is empty; return placeholder value as root.\n    // How can currentHash be '' / nil if it's a hash ?\n    if (currentHash === '') {\n      currentHash = ZERO;\n    }\n\n    return currentHash;\n  }\n\n  updateWithSideNodes(\n    key: string,\n    value: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    let currentHash;\n    let currentData;\n\n    this.set(hash(value), value);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    this.set(currentHash, currentData);\n\n    currentData = currentHash;\n\n    // If the leaf node that sibling nodes lead to has a different actual path\n    // than the leaf node being updated, we need to create an intermediate node\n    // with this leaf node and the new leaf node as children.\n    //\n    // First, get the number of bits that the paths of the two leaf nodes share\n    // in common as a prefix.\n\n    let commonPrefixCount;\n\n    if (oldLeafHash === ZERO) {\n      commonPrefixCount = MAX_HEIGHT;\n    } else {\n      const [actualPath] = parseLeaf(oldLeafData);\n      commonPrefixCount = countCommonPrefix(key, actualPath);\n    }\n\n    if (commonPrefixCount !== MAX_HEIGHT) {\n      if (getBitAtFromMSB(key, commonPrefixCount) === 1) {\n        [currentHash, currentData] = hashNode(oldLeafHash, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, oldLeafHash);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      let sideNode;\n      const offsetOfSideNodes = MAX_HEIGHT - sideNodes.length;\n\n      // If there are no sidenodes at this height, but the number of\n      // bits that the paths of the two leaf nodes share in common is\n      // greater than this height, then we need to build up the tree\n      // to this height with placeholder values at siblings.\n\n      if (i - offsetOfSideNodes < 0 || sideNodes[i - offsetOfSideNodes] === '') {\n        if (commonPrefixCount !== MAX_HEIGHT && commonPrefixCount > MAX_HEIGHT - 1 - i) {\n          sideNode = ZERO;\n        } else {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n      } else {\n        sideNode = sideNodes[i - offsetOfSideNodes];\n      }\n\n      if (getBitAtFromMSB(key, MAX_HEIGHT - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    return currentHash;\n  }\n\n  update(key: string, value: string): void {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n\n  delete(key: string): void {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n\n  prove(key: string): SparseMerkleProof {\n    const [sideNodes, leafHash, leafData, siblingData] = this.sideNodesForRoot(key, this.root);\n\n    const nonEmptySideNodes: string[] = [];\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] !== '') {\n        nonEmptySideNodes.push(sideNodes[i]);\n      }\n    }\n\n    // Deal with non-membership proofs. If the leaf hash is the placeholder\n    // value, we do not need to add anything else to the proof.\n    let nonMembershipLeafData = '';\n    if (leafHash !== ZERO) {\n      const [actualPath] = parseLeaf(leafData);\n      if (actualPath !== key) {\n        // This is a non-membership proof that involves showing a different leaf.\n        // Add the leaf data to the proof.\n        nonMembershipLeafData = leafData;\n      }\n    }\n\n    const proof = new SparseMerkleProof(nonEmptySideNodes, nonMembershipLeafData, siblingData);\n    return proof;\n  }\n\n  proveCompacted(key: string): SparseCompactMerkleProof {\n    const proof = this.prove(key);\n    const compactedProof = compactProof(proof);\n    return compactedProof;\n  }\n}\n"],"mappings":"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","names":["require_common","require__","require__","require__","require__","hash","hash","LogLevel","ErrorCode","version","error","version","version","version","logger","version","hash","hash","hash","hash","hashLeaf","hash","hashNode","hashNode","hash","hashLeaf"]}