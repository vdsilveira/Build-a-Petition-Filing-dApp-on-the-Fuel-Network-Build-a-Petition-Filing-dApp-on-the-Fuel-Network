import type { Coder } from './abstract-coder';
import type { InputValueOf, DecodedValueOf } from './enum';
import { EnumCoder } from './enum';
type SwayOption<T> = {
    None: [];
} | {
    Some: T;
};
export type Option<T> = T | undefined;
export declare class OptionCoder<TCoders extends Record<string, Coder>> extends EnumCoder<TCoders> {
    encode(value: InputValueOf<TCoders>): Uint8Array;
    toSwayOption(input: InputValueOf<TCoders>): SwayOption<unknown>;
    decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number];
    toOption(output?: DecodedValueOf<TCoders>): Option<unknown>;
}
export {};
//# sourceMappingURL=option.d.ts.map