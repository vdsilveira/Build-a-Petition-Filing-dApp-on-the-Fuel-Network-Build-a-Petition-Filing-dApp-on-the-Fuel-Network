import { Provider } from '@fuel-ts/providers';
import type { WalletUnlocked } from '../wallets';
type LaunchNodeOptions = {
    chainConfigPath?: string;
    consensusKey?: string;
    ip?: string;
    port?: string;
    args?: string[];
    useSystemFuelCore?: boolean;
};
export type LaunchNodeResult = Promise<{
    cleanup: () => void;
    ip: string;
    port: string;
}>;
/**
 * Launches a fuel-core node.
 * @param chainConfigPath - path to the chain configuration file.
 * @param consensusKey - the consensus key to use.
 * @param ip - the ip to bind to. (optional, defaults to 0.0.0.0)
 * @param port - the port to bind to. (optional, defaults to 4000 or the next available port)
 * @param args - additional arguments to pass to fuel-core
 * @param useSystemFuelCore - whether to use the system fuel-core binary or the one provided by the \@fuel-ts/fuel-core package.
 * */
export declare const launchNode: ({ chainConfigPath, consensusKey, ip, port, args, useSystemFuelCore, }: LaunchNodeOptions) => LaunchNodeResult;
export type LaunchNodeAndGetWalletsResult = Promise<{
    wallets: WalletUnlocked[];
    stop: () => void;
    provider: Provider;
}>;
/**
 * Launches a fuel-core node and returns a provider, 10 wallets, and a cleanup function to stop the node.
 * @param launchNodeOptions - options to launch the fuel-core node with.
 * @param walletCount - the number of wallets to generate. (optional, defaults to 10)
 * */
export declare const launchNodeAndGetWallets: ({ launchNodeOptions, walletCount, }?: {
    launchNodeOptions?: Partial<LaunchNodeOptions> | undefined;
    walletCount?: number | undefined;
}) => LaunchNodeAndGetWalletsResult;
export {};
//# sourceMappingURL=launchNode.d.ts.map