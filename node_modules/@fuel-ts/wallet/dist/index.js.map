{"version":3,"sources":["../src/index.ts","../src/base-unlocked-wallet.ts","../src/account.ts","../src/utils.ts","../src/keystore-wallet.ts","../src/wallets.ts","../src/wallet.ts"],"sourcesContent":["export * from './base-unlocked-wallet';\nexport * from './account';\nexport * from './wallet';\nexport * from './wallets';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { hashMessage, hashTransaction } from '@fuel-ts/hasher';\nimport type {\n  TransactionResponse,\n  TransactionRequestLike,\n  CallResult,\n  Provider,\n} from '@fuel-ts/providers';\nimport { transactionRequestify } from '@fuel-ts/providers';\nimport { Signer } from '@fuel-ts/signer';\n\nimport { Account } from './account';\nimport { encryptKeystoreWallet } from './keystore-wallet';\n\n/**\n * `BaseWalletUnlocked` provides the base functionalities for an unlocked wallet.\n */\nexport class BaseWalletUnlocked extends Account {\n  /**\n   * Default HDWallet path.\n   */\n  static defaultPath = \"m/44'/1179993420'/0'/0/0\";\n\n  /**\n   * The provider used to interact with the Fuel network.\n   */\n  provider: Provider;\n\n  /**\n   * A function that returns the wallet's signer.\n   */\n  signer: () => Signer;\n\n  /**\n   * Creates a new BaseWalletUnlocked instance.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance.\n   */\n  constructor(privateKey: BytesLike, provider: Provider) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n    this.provider = provider;\n  }\n\n  /**\n   * Gets the private key of the wallet.\n   *\n   * @returns The private key of the wallet.\n   */\n  get privateKey(): string {\n    return this.signer().privateKey;\n  }\n\n  /**\n   * Gets the public key of the wallet.\n   *\n   * @returns\n   */\n  get publicKey(): string {\n    return this.signer().publicKey;\n  }\n\n  /**\n   * Signs a message with the wallet's private key.\n   *\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signMessage(message: string): Promise<string> {\n    const signedMessage = await this.signer().sign(hashMessage(message));\n    return signedMessage;\n  }\n\n  /**\n   * Signs a transaction with the wallet's private key.\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const chainId = (await this.provider.getChain()).consensusParameters.chainId.toNumber();\n    const hashedTransaction = hashTransaction(transactionRequest, chainId);\n    const signature = await this.signer().sign(hashedTransaction);\n\n    return signature;\n  }\n\n  /**\n   * Populates a transaction with the witnesses signature.\n   *\n   * @param transactionRequestLike - The transaction request to populate.\n   * @returns The populated transaction request.\n   */\n  async populateTransactionWitnessesSignature(transactionRequestLike: TransactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const signedTransaction = await this.signTransaction(transactionRequest);\n\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n\n    return transactionRequest;\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequestLike - The transaction request to send.\n   * @returns A promise that resolves to the TransactionResponse object.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.estimateTxDependencies(transactionRequest);\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest)\n    );\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends a call to the network using `provider.call`.\n   *\n   * @param transactionRequestLike - The transaction request to simulate.\n   * @returns A promise that resolves to the CallResult object.\n   */\n  async simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.estimateTxDependencies(transactionRequest);\n    return this.provider.call(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n      }\n    );\n  }\n\n  async encrypt(password: string): Promise<string> {\n    return encryptKeystoreWallet(this.privateKey, this.address, password);\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport { Address } from '@fuel-ts/address';\nimport { BaseAssetId } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { AbstractAccount } from '@fuel-ts/interfaces';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  TransactionRequestLike,\n  CallResult,\n  TransactionRequest,\n  Coin,\n  CoinQuantityLike,\n  CoinQuantity,\n  Message,\n  Resource,\n  ExcludeResourcesOption,\n  TransactionResponse,\n  Provider,\n} from '@fuel-ts/providers';\nimport {\n  withdrawScript,\n  ScriptTransactionRequest,\n  transactionRequestify,\n} from '@fuel-ts/providers';\n\nimport {\n  composeScriptForTransferringToContract,\n  formatScriptDataForTransferringToContract,\n} from './utils';\n\ntype TxParamsType = Pick<TransactionRequestLike, 'gasLimit' | 'gasPrice' | 'maturity'>;\n\n/**\n * `Account` provides an abstraction for interacting with accounts or wallets on the network.\n */\nexport class Account extends AbstractAccount {\n  /**\n   * The address associated with the account.\n   */\n  readonly address: AbstractAddress;\n\n  /**\n   * The provider used to interact with the network.\n   */\n  provider: Provider;\n\n  /**\n   * Creates a new Account instance.\n   *\n   * @param address - The address of the account.\n   * @param provider - A Provider instance.\n   */\n  constructor(address: string | AbstractAddress, provider: Provider) {\n    super();\n    this.provider = provider;\n    this.address = Address.fromDynamicInput(address);\n  }\n\n  /**\n   * Changes the provider connection for the account.\n   *\n   * @param provider - A Provider instance.\n   * @returns The updated Provider instance.\n   */\n  connect(provider: Provider): Provider {\n    this.provider = provider;\n    return this.provider;\n  }\n\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - IDs of coins to exclude.\n   * @param excludedIds - IDs of resources to be excluded from the query.\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(\n    quantities: CoinQuantityLike[] /** IDs of coins to exclude */,\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);\n  }\n\n  /**\n   * Retrieves coins owned by the account.\n   *\n   * @param assetId - The asset ID of the coins to retrieve.\n   * @returns A promise that resolves to an array of Coins.\n   */\n  async getCoins(assetId?: BytesLike): Promise<Coin[]> {\n    const coins = [];\n\n    const pageSize = 9999;\n    let cursor;\n    // eslint-disable-next-line no-unreachable-loop\n    for (;;) {\n      const pageCoins = await this.provider.getCoins(this.address, assetId, {\n        first: pageSize,\n        after: cursor,\n      });\n\n      coins.push(...pageCoins);\n\n      const hasNextPage = pageCoins.length >= pageSize;\n      if (!hasNextPage) {\n        break;\n      }\n\n      // TODO: implement pagination\n      throw new FuelError(\n        ErrorCode.NOT_SUPPORTED,\n        `Wallets containing more than ${pageSize} coins exceed the current supported limit.`\n      );\n    }\n\n    return coins;\n  }\n\n  /**\n   * Retrieves messages owned by the account.\n   *\n   * @returns A promise that resolves to an array of Messages.\n   */\n  async getMessages(): Promise<Message[]> {\n    const messages = [];\n\n    const pageSize = 9999;\n    let cursor;\n    // eslint-disable-next-line no-unreachable-loop\n    for (;;) {\n      const pageMessages = await this.provider.getMessages(this.address, {\n        first: pageSize,\n        after: cursor,\n      });\n\n      messages.push(...pageMessages);\n\n      const hasNextPage = pageMessages.length >= pageSize;\n      if (!hasNextPage) {\n        break;\n      }\n\n      // TODO: implement pagination\n      throw new FuelError(\n        ErrorCode.NOT_SUPPORTED,\n        `Wallets containing more than ${pageSize} messages exceed the current supported limit.`\n      );\n    }\n\n    return messages;\n  }\n\n  /**\n   * Retrieves the balance of the account for the given asset.\n   *\n   * @param assetId - The asset ID to check the balance for.\n   * @returns A promise that resolves to the balance amount.\n   */\n  async getBalance(assetId: BytesLike = BaseAssetId): Promise<BN> {\n    const amount = await this.provider.getBalance(this.address, assetId);\n    return amount;\n  }\n\n  /**\n   * Retrieves all the balances for the account.\n   *\n   * @returns A promise that resolves to an array of Coins and their quantities.\n   */\n  async getBalances(): Promise<CoinQuantity[]> {\n    const balances = [];\n\n    const pageSize = 9999;\n    let cursor;\n    // eslint-disable-next-line no-unreachable-loop\n    for (;;) {\n      const pageBalances = await this.provider.getBalances(this.address, {\n        first: pageSize,\n        after: cursor,\n      });\n\n      balances.push(...pageBalances);\n\n      const hasNextPage = pageBalances.length >= pageSize;\n      if (!hasNextPage) {\n        break;\n      }\n\n      // TODO: implement pagination\n      throw new FuelError(\n        ErrorCode.NOT_SUPPORTED,\n        `Wallets containing more than ${pageSize} balances exceed the current supported limit.`\n      );\n    }\n\n    return balances;\n  }\n\n  /**\n   * Adds resources to the transaction enough to fund it.\n   *\n   * @param request - The transaction request.\n   * @returns A promise that resolves when the resources are added to the transaction.\n   */\n  async fund<T extends TransactionRequest>(request: T): Promise<void> {\n    const { gasPriceFactor } = this.provider.getGasConfig();\n    const fee = request.calculateFee(gasPriceFactor);\n    const resources = await this.getResourcesToSpend([fee]);\n\n    request.addResources(resources);\n  }\n\n  /**\n   * Transfers coins to a destination address.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer.\n   * @param txParams - The transaction parameters (gasLimit, gasPrice, maturity).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transfer(\n    /** Address of the destination */\n    destination: AbstractAddress,\n    /** Amount of coins */\n    amount: BigNumberish,\n    /** Asset ID of coins */\n    assetId: BytesLike = BaseAssetId,\n    /** Tx Params */\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const { maxGasPerTx } = this.provider.getGasConfig();\n    const params: TxParamsType = { gasLimit: maxGasPerTx, ...txParams };\n    const request = new ScriptTransactionRequest(params);\n    request.addCoinOutput(destination, amount, assetId);\n\n    const { gasPriceFactor } = this.provider.getGasConfig();\n\n    const fee = request.calculateFee(gasPriceFactor);\n    let quantities: CoinQuantityLike[] = [];\n\n    if (fee.assetId === hexlify(assetId)) {\n      fee.amount = fee.amount.add(amount);\n      quantities = [fee];\n    } else {\n      quantities = [[amount, assetId], fee];\n    }\n\n    const resources = await this.getResourcesToSpend(quantities);\n    request.addResources(resources);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Transfers coins to a contract address.\n   *\n   * @param contractId - The address of the contract.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer.\n   * @param txParams - The optional transaction parameters.\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transferToContract(\n    /** Contract address */\n    contractId: AbstractAddress,\n    /** Amount of coins */\n    amount: BigNumberish,\n    /** Asset ID of coins */\n    assetId: BytesLike = BaseAssetId,\n    /** Tx Params */\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const script = await composeScriptForTransferringToContract();\n\n    const scriptData = formatScriptDataForTransferringToContract(\n      contractId.toB256(),\n      amount,\n      assetId\n    );\n\n    const { maxGasPerTx } = this.provider.getGasConfig();\n    const request = new ScriptTransactionRequest({\n      gasLimit: maxGasPerTx,\n      ...txParams,\n      script,\n      scriptData,\n    });\n\n    request.addContractInputAndOutput(contractId);\n\n    const { gasPriceFactor } = this.provider.getGasConfig();\n\n    const fee = request.calculateFee(gasPriceFactor);\n\n    let quantities: CoinQuantityLike[] = [];\n\n    if (fee.assetId === hexlify(assetId)) {\n      fee.amount = fee.amount.add(amount);\n      quantities = [fee];\n    } else {\n      quantities = [[amount, assetId], fee];\n    }\n\n    const resources = await this.getResourcesToSpend(quantities);\n    request.addResources(resources);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   *\n   * @param recipient - Address of the recipient on the base chain.\n   * @param amount - Amount of base asset.\n   * @param txParams - The optional transaction parameters.\n   * @returns A promise that resolves to the transaction response.\n   */\n  async withdrawToBaseLayer(\n    /** Address of the recipient on the base chain */\n    recipient: AbstractAddress,\n    /** Amount of base asset */\n    amount: BigNumberish,\n    /** Tx Params */\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    // add recipient and amount to the transaction script code\n    const recipientDataArray = arrayify(\n      '0x'.concat(recipient.toHexString().substring(2).padStart(64, '0'))\n    );\n    const amountDataArray = arrayify(\n      '0x'.concat(bn(amount).toHex().substring(2).padStart(16, '0'))\n    );\n    const script = new Uint8Array([\n      ...arrayify(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray,\n    ]);\n\n    // build the transaction\n    const { maxGasPerTx } = this.provider.getGasConfig();\n    const params = { script, gasLimit: maxGasPerTx, ...txParams };\n    const request = new ScriptTransactionRequest(params);\n\n    const { gasPriceFactor } = this.provider.getGasConfig();\n\n    const fee = request.calculateFee(gasPriceFactor);\n    let quantities: CoinQuantityLike[] = [];\n    fee.amount = fee.amount.add(amount);\n    quantities = [fee];\n    const resources = await this.getResourcesToSpend(quantities);\n    request.addResources(resources);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Sends a transaction to the network.\n   *\n   * @param transactionRequestLike - The transaction request to be sent.\n   * @returns A promise that resolves to the transaction response.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.estimateTxDependencies(transactionRequest);\n    return this.provider.sendTransaction(transactionRequest);\n  }\n\n  /**\n   * Simulates a transaction.\n   *\n   * @param transactionRequestLike - The transaction request to be simulated.\n   * @returns A promise that resolves to the call result.\n   */\n  async simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.estimateTxDependencies(transactionRequest);\n    return this.provider.simulate(transactionRequest);\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { NumberCoder } from '@fuel-ts/abi-coder';\nimport type { B256Address } from '@fuel-ts/interfaces';\nimport { BN, type BigNumberish } from '@fuel-ts/math';\nimport * as asm from '@fuels/vm-asm';\n\nexport const composeScriptForTransferringToContract = async () => {\n  // implementation extracted from Rust SDK at:\n  // https://github.com/FuelLabs/fuels-rs/blob/master/packages/fuels-core/src/types/transaction_builders.rs#L240-L272\n  // This script loads:\n  //  - a pointer to the contract id,\n  //  - the actual amount\n  //  - a pointer to the asset id\n  // into the registers 0x10, 0x12, 0x13\n  // and calls the TR instruction\n\n  // TODO: Remove ts-expect-error\n  // @ts-expect-error method reference missing in DTS\n  await asm.initWasm();\n\n  // const gtf = fuelAsm.gtf(0x10, 0x00, 0xc);\n  const gtf = asm.gtf(0x10, 0x00, asm.GTFArgs.ScriptData);\n  const addi = asm.addi(0x11, 0x10, 0x20);\n  const lw = asm.lw(0x12, 0x11, 0x0);\n  const addi2 = asm.addi(0x13, 0x11, 0x8);\n  const tr = asm.tr(0x10, 0x12, 0x13);\n  const ret = asm.ret(0x1);\n\n  const script = Uint8Array.from([\n    ...gtf.to_bytes(),\n    ...addi.to_bytes(),\n    ...lw.to_bytes(),\n    ...addi2.to_bytes(),\n    ...tr.to_bytes(),\n    ...ret.to_bytes(),\n  ]);\n\n  return script;\n};\n\nexport const formatScriptDataForTransferringToContract = (\n  hexelifiedContractId: B256Address,\n  amountToTransfer: BigNumberish,\n  assetId: BytesLike\n) => {\n  const numberCoder = new NumberCoder('u16');\n\n  const encoded = numberCoder.encode(new BN(amountToTransfer).toNumber());\n\n  const scriptData = Uint8Array.from([\n    ...arrayify(hexelifiedContractId),\n    ...encoded,\n    ...arrayify(assetId),\n  ]);\n\n  return scriptData;\n};\n","import { hexlify } from '@ethersproject/bytes';\nimport {\n  bufferFromString,\n  keccak256,\n  randomBytes,\n  scrypt,\n  stringFromBuffer,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n} from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport type KeystoreWallet = {\n  id: string;\n  version: number;\n  address: string;\n  crypto: KeystoreCrypto;\n};\n\ntype KeystoreCrypto = {\n  cipher: 'aes-128-ctr';\n  cipherparams: { iv: string };\n  ciphertext: string;\n  kdf: 'scrypt';\n  mac: string;\n  kdfparams: KDFParams;\n};\n\ntype KDFParams = {\n  dklen: number;\n  n: number;\n  p: number;\n  r: number;\n  salt: string;\n};\n\n// Same values used in the Rust SDK\nexport const DEFAULT_KDF_PARAMS_LOG_N = 13;\nexport const DEFAULT_KDF_PARAMS_R = 8;\nexport const DEFAULT_KDF_PARAMS_P = 1;\nexport const DEFAULT_KEY_SIZE = 32;\nexport const DEFAULT_IV_SIZE = 16;\n\n/**\n * Removes the '0x' prefix from a hexadecimal string.\n * If the prefix does not exist, it returns the original string.\n */\nexport const removeHexPrefix = (hexString: string) => {\n  if (/^0x/.test(hexString)) {\n    return hexString.slice(2);\n  }\n\n  return hexString;\n};\n\nexport async function encryptKeystoreWallet(\n  privateKey: string,\n  address: AbstractAddress,\n  password: string\n): Promise<string> {\n  // Convert the hexlified private key string to a Buffer.\n  const privateKeyBuffer = bufferFromString(removeHexPrefix(privateKey), 'hex');\n\n  // Generate a random salt.\n  const salt = randomBytes(DEFAULT_KEY_SIZE);\n\n  const key = scrypt({\n    password: bufferFromString(password),\n    salt,\n    dklen: DEFAULT_KEY_SIZE,\n    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n    r: DEFAULT_KDF_PARAMS_R,\n    p: DEFAULT_KDF_PARAMS_P,\n  });\n\n  // Encrypt the private key using AES-128-CTR.\n  const iv = randomBytes(DEFAULT_IV_SIZE);\n\n  const ciphertext = await encryptJsonWalletData(privateKeyBuffer, key, iv);\n\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);\n\n  // Calculate the MAC.\n  const macHashUint8Array = keccak256(data);\n\n  const mac = stringFromBuffer(macHashUint8Array, 'hex');\n\n  // Construct keystore.\n  const keystore: KeystoreWallet = {\n    id: uuidv4(),\n    version: 3,\n    address: removeHexPrefix(address.toHexString()),\n    crypto: {\n      cipher: 'aes-128-ctr',\n      mac,\n      cipherparams: { iv: stringFromBuffer(iv, 'hex') },\n      ciphertext: stringFromBuffer(ciphertext, 'hex'),\n      kdf: 'scrypt',\n      kdfparams: {\n        dklen: DEFAULT_KEY_SIZE,\n        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n        p: DEFAULT_KDF_PARAMS_P,\n        r: DEFAULT_KDF_PARAMS_R,\n        salt: stringFromBuffer(salt, 'hex'),\n      },\n    },\n  };\n\n  return JSON.stringify(keystore);\n}\n\nexport async function decryptKeystoreWallet(jsonWallet: string, password: string): Promise<string> {\n  const keystoreWallet = JSON.parse(jsonWallet) as KeystoreWallet;\n\n  // Extract the parameters needed for decryption.\n  const {\n    crypto: {\n      mac,\n      ciphertext,\n      cipherparams: { iv },\n      kdfparams: { dklen, n, r, p, salt },\n    },\n  } = keystoreWallet;\n\n  const ciphertextBuffer = bufferFromString(ciphertext, 'hex');\n  const ivBuffer = bufferFromString(iv, 'hex');\n  const saltBuffer = bufferFromString(salt, 'hex');\n\n  const passwordBuffer = bufferFromString(password);\n\n  const key = scrypt({\n    password: passwordBuffer,\n    salt: saltBuffer,\n    n,\n    p,\n    r,\n    dklen,\n  });\n\n  // Verify the MAC. It should be the Keccak-256 hash of the concatenation of the second half of the derived key and the ciphertext.\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);\n\n  const macHashUint8Array = keccak256(data);\n\n  const macHash = stringFromBuffer(macHashUint8Array, 'hex');\n\n  if (mac !== macHash) {\n    throw new FuelError(\n      ErrorCode.INVALID_PASSWORD,\n      'Failed to decrypt the keystore wallet, the provided password is incorrect.'\n    );\n  }\n\n  // Decrypt the private key.\n  const buffer = await decryptJsonWalletData(ciphertextBuffer, key, ivBuffer);\n\n  const privateKey = hexlify(buffer);\n\n  return privateKey;\n}\n","//\n// Because WalletLocked and WalletUnlocked has a cycle dependency\n// it's not possible to split the two classes in different files\n//\n/* eslint-disable max-classes-per-file */\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { HDWallet } from '@fuel-ts/hdwallet';\nimport { Mnemonic } from '@fuel-ts/mnemonic';\nimport type { Provider } from '@fuel-ts/providers';\nimport { Signer } from '@fuel-ts/signer';\n\nimport { Account } from './account';\nimport { BaseWalletUnlocked } from './base-unlocked-wallet';\nimport { decryptKeystoreWallet } from './keystore-wallet';\nimport type { GenerateOptions } from './types/GenerateOptions';\n\n/**\n * `WalletLocked` provides the functionalities for a locked  wallet.\n */\nexport class WalletLocked extends Account {\n  /**\n   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.\n   *\n   * @param privateKey - The private key used to unlock the wallet.\n   * @returns An instance of WalletUnlocked.\n   */\n  unlock(privateKey: BytesLike): WalletUnlocked {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new WalletUnlocked(privateKey, this.provider);\n  }\n}\n\n/**\n * `WalletUnlocked` provides the functionalities for an unlocked wallet.\n */\nexport class WalletUnlocked extends BaseWalletUnlocked {\n  /**\n   * Locks the wallet and returns an instance of WalletLocked.\n   *\n   * @returns An instance of WalletLocked.\n   */\n  lock(): WalletLocked {\n    this.signer = () => new Signer('0x00');\n    return new WalletLocked(this.address, this.provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static generate(generateOptions: GenerateOptions): WalletUnlocked {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n\n    return new WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance.\n   * @param path - The derivation path (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromSeed(seed: string, provider: Provider, path?: string): WalletUnlocked {\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance.\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromMnemonic(\n    mnemonic: string,\n    provider: Provider,\n    path?: string,\n    passphrase?: BytesLike\n  ): WalletUnlocked {\n    const seed = Mnemonic.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance.\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromExtendedKey(extendedKey: string, provider: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromExtendedKey(extendedKey);\n\n    return new WalletUnlocked(<string>hdWallet.privateKey, provider);\n  }\n\n  static async fromEncryptedJson(\n    jsonWallet: string,\n    password: string,\n    provider: Provider\n  ): Promise<WalletUnlocked> {\n    const privateKey = await decryptKeystoreWallet(jsonWallet, password);\n\n    return new WalletUnlocked(privateKey, provider);\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport type { Provider } from '@fuel-ts/providers';\n\nimport { WalletLocked, WalletUnlocked } from './wallets';\n\n/**\n * `Wallet` provides methods to create locked and unlocked wallet instances.\n */\nexport class Wallet {\n  /**\n   * Creates a locked wallet instance from an address and a provider.\n   *\n   * @param address - The address of the wallet.\n   * @param provider - A Provider instance.\n   * @returns A locked wallet instance.\n   */\n  static fromAddress(address: string | AbstractAddress, provider: Provider): WalletLocked {\n    return new WalletLocked(address, provider);\n  }\n\n  /**\n   * Creates an unlocked wallet instance from a private key and a provider.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance.\n   * @returns An unlocked wallet instance.\n   */\n  static fromPrivateKey(privateKey: BytesLike, provider: Provider) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static generate = WalletUnlocked.generate;\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param path - The derivation path (optional).\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromSeed = WalletUnlocked.fromSeed;\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromMnemonic = WalletUnlocked.fromMnemonic;\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromExtendedKey = WalletUnlocked.fromExtendedKey;\n  static fromEncryptedJson = WalletUnlocked.fromEncryptedJson;\n}\n"],"mappings":"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","names":["import_providers","import_bytes","import_math","gtf","addi","lw","addi2","tr","ret","import_bytes","import_errors","uuidv4","import_signer"]}