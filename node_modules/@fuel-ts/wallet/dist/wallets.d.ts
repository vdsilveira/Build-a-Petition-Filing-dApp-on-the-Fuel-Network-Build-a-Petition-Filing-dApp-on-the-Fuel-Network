import type { BytesLike } from '@ethersproject/bytes';
import type { Provider } from '@fuel-ts/providers';
import { Account } from './account';
import { BaseWalletUnlocked } from './base-unlocked-wallet';
import type { GenerateOptions } from './types/GenerateOptions';
/**
 * `WalletLocked` provides the functionalities for a locked  wallet.
 */
export declare class WalletLocked extends Account {
    /**
     * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.
     *
     * @param privateKey - The private key used to unlock the wallet.
     * @returns An instance of WalletUnlocked.
     */
    unlock(privateKey: BytesLike): WalletUnlocked;
}
/**
 * `WalletUnlocked` provides the functionalities for an unlocked wallet.
 */
export declare class WalletUnlocked extends BaseWalletUnlocked {
    /**
     * Locks the wallet and returns an instance of WalletLocked.
     *
     * @returns An instance of WalletLocked.
     */
    lock(): WalletLocked;
    /**
     * Generate a new Wallet Unlocked with a random key pair.
     *
     * @param generateOptions - Options to customize the generation process (optional).
     * @returns An instance of WalletUnlocked.
     */
    static generate(generateOptions: GenerateOptions): WalletUnlocked;
    /**
     * Create a Wallet Unlocked from a seed.
     *
     * @param seed - The seed phrase.
     * @param provider - A Provider instance.
     * @param path - The derivation path (optional).
     * @returns An instance of WalletUnlocked.
     */
    static fromSeed(seed: string, provider: Provider, path?: string): WalletUnlocked;
    /**
     * Create a Wallet Unlocked from a mnemonic phrase.
     *
     * @param mnemonic - The mnemonic phrase.
     * @param provider - A Provider instance.
     * @param path - The derivation path (optional).
     * @param passphrase - The passphrase for the mnemonic (optional).
     * @returns An instance of WalletUnlocked.
     */
    static fromMnemonic(mnemonic: string, provider: Provider, path?: string, passphrase?: BytesLike): WalletUnlocked;
    /**
     * Create a Wallet Unlocked from an extended key.
     *
     * @param extendedKey - The extended key.
     * @param provider - A Provider instance.
     * @returns An instance of WalletUnlocked.
     */
    static fromExtendedKey(extendedKey: string, provider: Provider): WalletUnlocked;
    static fromEncryptedJson(jsonWallet: string, password: string, provider: Provider): Promise<WalletUnlocked>;
}
//# sourceMappingURL=wallets.d.ts.map