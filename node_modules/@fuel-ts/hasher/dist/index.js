"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  hash: () => hash,
  hashMessage: () => hashMessage,
  hashTransaction: () => hashTransaction,
  uint64ToBytesBE: () => uint64ToBytesBE
});
module.exports = __toCommonJS(src_exports);

// src/hasher.ts
var import_bytes = require("@ethersproject/bytes");
var import_sha2 = require("@ethersproject/sha2");
var import_configs = require("@fuel-ts/address/configs");
var import_crypto = require("@fuel-ts/crypto");
var import_math = require("@fuel-ts/math");
var import_providers = require("@fuel-ts/providers");
var import_transactions = require("@fuel-ts/transactions");
var import_ramda = require("ramda");
function hashMessage(msg) {
  return (0, import_sha2.sha256)((0, import_crypto.bufferFromString)(msg, "utf-8"));
}
function uint64ToBytesBE(value) {
  const bigIntValue = BigInt(value);
  const buffer = new ArrayBuffer(8);
  const dataView = new DataView(buffer);
  dataView.setBigUint64(0, bigIntValue, false);
  return new Uint8Array(dataView.buffer);
}
function hashTransaction(transactionRequestLike, chainId) {
  const transactionRequest = (0, import_providers.transactionRequestify)(transactionRequestLike);
  const transaction = transactionRequest.toTransaction();
  if (transaction.type === import_providers.TransactionType.Script) {
    transaction.receiptsRoot = import_configs.ZeroBytes32;
  }
  transaction.inputs = transaction.inputs.map((input) => {
    const inputClone = (0, import_ramda.clone)(input);
    switch (inputClone.type) {
      case import_transactions.InputType.Coin: {
        inputClone.txPointer = {
          blockHeight: 0,
          txIndex: 0
        };
        inputClone.predicateGasUsed = (0, import_math.bn)(0);
        return inputClone;
      }
      case import_transactions.InputType.Message: {
        inputClone.predicateGasUsed = (0, import_math.bn)(0);
        return inputClone;
      }
      case import_transactions.InputType.Contract: {
        inputClone.txPointer = {
          blockHeight: 0,
          txIndex: 0
        };
        inputClone.utxoID = {
          transactionId: import_configs.ZeroBytes32,
          outputIndex: 0
        };
        inputClone.balanceRoot = import_configs.ZeroBytes32;
        inputClone.stateRoot = import_configs.ZeroBytes32;
        return inputClone;
      }
      default:
        return inputClone;
    }
  });
  transaction.outputs = transaction.outputs.map((output) => {
    const outputClone = (0, import_ramda.clone)(output);
    switch (outputClone.type) {
      case import_transactions.OutputType.Contract: {
        outputClone.balanceRoot = import_configs.ZeroBytes32;
        outputClone.stateRoot = import_configs.ZeroBytes32;
        return outputClone;
      }
      case import_transactions.OutputType.Change: {
        outputClone.amount = (0, import_math.bn)(0);
        return outputClone;
      }
      case import_transactions.OutputType.Variable: {
        outputClone.to = import_configs.ZeroBytes32;
        outputClone.amount = (0, import_math.bn)(0);
        outputClone.assetId = import_configs.ZeroBytes32;
        return outputClone;
      }
      default:
        return outputClone;
    }
  });
  transaction.witnessesCount = 0;
  transaction.witnesses = [];
  const chainIdBytes = uint64ToBytesBE(chainId);
  const concatenatedData = (0, import_bytes.concat)([chainIdBytes, new import_transactions.TransactionCoder().encode(transaction)]);
  return (0, import_sha2.sha256)(concatenatedData);
}
function hash(data) {
  return (0, import_sha2.sha256)(data);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  hash,
  hashMessage,
  hashTransaction,
  uint64ToBytesBE
});
//# sourceMappingURL=index.js.map