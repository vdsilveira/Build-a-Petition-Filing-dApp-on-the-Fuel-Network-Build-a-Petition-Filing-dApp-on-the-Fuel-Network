"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/cli.ts
var cli_exports = {};
__export(cli_exports, {
  runVersions: () => runVersions
});
module.exports = __toCommonJS(cli_exports);
var import_chalk2 = require("chalk");
var import_cli_table = __toESM(require("cli-table"));

// src/lib/colorizeUserVersion.ts
var import_chalk = require("chalk");
var colorizeUserVersion = (params) => {
  const { version, isGt, isOk } = params;
  if (isGt) {
    return (0, import_chalk.cyan)(version);
  }
  if (isOk) {
    return (0, import_chalk.green)(version);
  }
  return (0, import_chalk.red)(version);
};

// src/lib/compareUserVersions.ts
var import_semver = __toESM(require("semver"));

// src/lib/getSupportedVersions.ts
function getSupportedVersions() {
  return {
    FORC: "0.44.0",
    FUEL_CORE: "0.20.5",
    FUELS: "0.60.0"
  };
}

// src/lib/compareUserVersions.ts
function compareUserVersions(params) {
  const { userForcVersion, userFuelCoreVersion } = params;
  const versions = getSupportedVersions();
  const userForcIsGt = import_semver.default.gt(userForcVersion, versions.FORC);
  const userFuelCoreIsGt = import_semver.default.gt(userFuelCoreVersion, versions.FUEL_CORE);
  const userForcIsEq = import_semver.default.eq(userForcVersion, versions.FORC);
  const userFuelCoreIsEq = import_semver.default.eq(userFuelCoreVersion, versions.FUEL_CORE);
  return {
    userForcIsGt,
    userFuelCoreIsGt,
    userForcIsEq,
    userFuelCoreIsEq
  };
}

// src/lib/getUserVersions.ts
var import_child_process = require("child_process");
function getUserVersions(params) {
  const { error } = console;
  let userForcVersion;
  let userFuelCoreVersion;
  try {
    const reg = /[^0-9.]+/g;
    userForcVersion = (0, import_child_process.execSync)("forc --version").toString().replace(reg, "");
    userFuelCoreVersion = (0, import_child_process.execSync)("fuel-core --version").toString().replace(reg, "");
  } catch (err) {
    error("Make sure you have Forc and Fuel-Core installed.");
    error(`  ${params.fuelUpLink}`);
    throw err;
  }
  return {
    userForcVersion,
    userFuelCoreVersion
  };
}

// src/cli.ts
function runVersions() {
  const { error, info } = console;
  const supportedVersions = getSupportedVersions();
  const cliTable = new import_cli_table.default({
    head: ["", (0, import_chalk2.bold)("Supported"), (0, import_chalk2.bold)(`Yours / System`)]
  });
  const fuelUpLink = (0, import_chalk2.green)("https://github.com/fuellabs/fuelup");
  const { userForcVersion, userFuelCoreVersion } = getUserVersions({ fuelUpLink });
  const comparisons = compareUserVersions({
    userForcVersion,
    userFuelCoreVersion
  });
  const userForcColorized = colorizeUserVersion({
    version: userForcVersion,
    isGt: comparisons.userForcIsGt,
    isOk: comparisons.userForcIsEq
  });
  const userFuelCoreColorized = colorizeUserVersion({
    version: userFuelCoreVersion,
    isGt: comparisons.userFuelCoreIsGt,
    isOk: comparisons.userFuelCoreIsEq
  });
  cliTable.push(["Forc", supportedVersions.FORC, userForcColorized]);
  cliTable.push(["Fuel-Core", supportedVersions.FUEL_CORE, userFuelCoreColorized]);
  const someIsGt = comparisons.userForcIsGt || comparisons.userFuelCoreIsGt;
  const bothAreExact = comparisons.userForcIsEq && comparisons.userFuelCoreIsEq;
  if (someIsGt) {
    info(`Your system's components are newer than the ones supported!`);
    info(cliTable.toString());
    process.exit(0);
  } else if (bothAreExact) {
    info(`You have all the right versions! \u26A1`);
    info(cliTable.toString());
    process.exit(0);
  } else {
    error(`You're using outdated versions \u2014 update them with:`);
    error(`  ${fuelUpLink}`);
    error(cliTable.toString());
    process.exit(1);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  runVersions
});
//# sourceMappingURL=cli.js.map