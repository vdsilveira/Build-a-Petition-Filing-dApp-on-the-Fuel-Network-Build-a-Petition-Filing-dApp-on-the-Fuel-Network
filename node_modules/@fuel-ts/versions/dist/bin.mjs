#!/usr/bin/env node

// src/cli.ts
import { bold, green as green2 } from "chalk";
import CliTable from "cli-table";

// src/lib/colorizeUserVersion.ts
import { cyan, green, red } from "chalk";
var colorizeUserVersion = (params) => {
  const { version, isGt, isOk } = params;
  if (isGt) {
    return cyan(version);
  }
  if (isOk) {
    return green(version);
  }
  return red(version);
};

// src/lib/compareUserVersions.ts
import semver from "semver";

// src/lib/getSupportedVersions.ts
function getSupportedVersions() {
  return {
    FORC: "0.44.0",
    FUEL_CORE: "0.20.5",
    FUELS: "0.60.0"
  };
}

// src/lib/compareUserVersions.ts
function compareUserVersions(params) {
  const { userForcVersion, userFuelCoreVersion } = params;
  const versions = getSupportedVersions();
  const userForcIsGt = semver.gt(userForcVersion, versions.FORC);
  const userFuelCoreIsGt = semver.gt(userFuelCoreVersion, versions.FUEL_CORE);
  const userForcIsEq = semver.eq(userForcVersion, versions.FORC);
  const userFuelCoreIsEq = semver.eq(userFuelCoreVersion, versions.FUEL_CORE);
  return {
    userForcIsGt,
    userFuelCoreIsGt,
    userForcIsEq,
    userFuelCoreIsEq
  };
}

// src/lib/getUserVersions.ts
import { execSync } from "child_process";
function getUserVersions(params) {
  const { error } = console;
  let userForcVersion;
  let userFuelCoreVersion;
  try {
    const reg = /[^0-9.]+/g;
    userForcVersion = execSync("forc --version").toString().replace(reg, "");
    userFuelCoreVersion = execSync("fuel-core --version").toString().replace(reg, "");
  } catch (err) {
    error("Make sure you have Forc and Fuel-Core installed.");
    error(`  ${params.fuelUpLink}`);
    throw err;
  }
  return {
    userForcVersion,
    userFuelCoreVersion
  };
}

// src/cli.ts
function runVersions() {
  const { error, info } = console;
  const supportedVersions = getSupportedVersions();
  const cliTable = new CliTable({
    head: ["", bold("Supported"), bold(`Yours / System`)]
  });
  const fuelUpLink = green2("https://github.com/fuellabs/fuelup");
  const { userForcVersion, userFuelCoreVersion } = getUserVersions({ fuelUpLink });
  const comparisons = compareUserVersions({
    userForcVersion,
    userFuelCoreVersion
  });
  const userForcColorized = colorizeUserVersion({
    version: userForcVersion,
    isGt: comparisons.userForcIsGt,
    isOk: comparisons.userForcIsEq
  });
  const userFuelCoreColorized = colorizeUserVersion({
    version: userFuelCoreVersion,
    isGt: comparisons.userFuelCoreIsGt,
    isOk: comparisons.userFuelCoreIsEq
  });
  cliTable.push(["Forc", supportedVersions.FORC, userForcColorized]);
  cliTable.push(["Fuel-Core", supportedVersions.FUEL_CORE, userFuelCoreColorized]);
  const someIsGt = comparisons.userForcIsGt || comparisons.userFuelCoreIsGt;
  const bothAreExact = comparisons.userForcIsEq && comparisons.userFuelCoreIsEq;
  if (someIsGt) {
    info(`Your system's components are newer than the ones supported!`);
    info(cliTable.toString());
    process.exit(0);
  } else if (bothAreExact) {
    info(`You have all the right versions! \u26A1`);
    info(cliTable.toString());
    process.exit(0);
  } else {
    error(`You're using outdated versions \u2014 update them with:`);
    error(`  ${fuelUpLink}`);
    error(cliTable.toString());
    process.exit(1);
  }
}

// src/bin.ts
runVersions();
//# sourceMappingURL=bin.mjs.map