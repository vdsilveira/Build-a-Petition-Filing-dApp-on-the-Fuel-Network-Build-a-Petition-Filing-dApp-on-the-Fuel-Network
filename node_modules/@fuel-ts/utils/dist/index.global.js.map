{"version":3,"sources":["../../versions/src/lib/getSupportedVersions.ts","../../versions/src/index.ts","../../errors/src/error-codes.ts","../../errors/src/fuel-error.ts","../src/utils/normalizeString.ts","../src/utils/chunkAndPadBytes.ts"],"sourcesContent":["export function getSupportedVersions() {\n  return {\n    FORC: '0.44.0',\n    FUEL_CORE: '0.20.5',\n    FUELS: '0.60.0',\n  };\n}\n","/*\n  1) Variables\n  ------------\n    `FUELS` — comes from `/packages/fuels/package.json`\n    `FUEL_CORE` — comes from `/packages/fuel-core/VERSION`\n    `FORC` — comes from `/packages/forc/VERSION`\n\n  3) Pre Build\n  ------------\n    There's a `prebuild` script in:\n     - packages/versions/package.json\n\n    Before build, it will call this file:\n      - packages/versions/scripts/replaceVersions.ts\n\n    Which will replace static versions at:\n      - packages/versions/src/lib/getSupportedVersions.ts\n\n    If no env variables are set, it uses the current versions\n    from the original locations mentioned in the 1st step.\n\n  3)  CI\n  ------------\n    As part of the CI release (1) routine, the changes made\n    to the versions package by the `prebuild` routine will\n    be committed by the same script (2) that handles the\n    docs versioning.\n\n      - (1) <repoRoot>/.github/workflows/release.yaml\n      - (2) <repoRoot>/changeset-version-with-docs.ts\n\n  4) Build\n  ------------\n    By the time we get to the `build` step, everything is in\n    place already and ready to be built and released.\n*/\n\nimport { getSupportedVersions } from './lib/getSupportedVersions';\n\nexport const versions = getSupportedVersions();\n","/**\n * Represents the different error codes thrown by the SDK\n */\nexport enum ErrorCode {\n  // abi\n  ABI_TYPES_AND_VALUES_MISMATCH = 'abi-types-and-values-mismatch',\n  ABI_MAIN_METHOD_MISSING = 'abi-main-method-missing',\n  INVALID_COMPONENT = 'invalid-component',\n  FRAGMENT_NOT_FOUND = 'fragment-not-found',\n  CONFIGURABLE_NOT_FOUND = 'configurable-not-found',\n  TYPE_NOT_FOUND = 'type-not-found',\n  TYPE_NOT_SUPPORTED = 'type-not-supported',\n  INVALID_DECODE_VALUE = 'invalid-decode-value',\n  JSON_ABI_ERROR = 'json-abi-error',\n  TYPE_ID_NOT_FOUND = 'type-id-not-found',\n  BIN_FILE_NOT_FOUND = 'bin-file-not-found',\n  CODER_NOT_FOUND = 'coder-not-found',\n  FUNCTION_NOT_FOUND = 'function-not-found',\n\n  // address\n  INVALID_BECH32_ADDRESS = 'invalid-bech32-address',\n\n  // provider\n  INVALID_URL = 'invalid-url',\n  CHAIN_INFO_CACHE_EMPTY = 'chain-info-cache-empty',\n  NODE_INFO_CACHE_EMPTY = 'node-info-cache-empty',\n  MISSING_PROVIDER = 'missing-provider',\n\n  // wallet\n  INSUFFICIENT_BALANCE = 'insufficient-balance',\n  WALLET_MANAGER_ERROR = 'wallet-manager-error',\n  HD_WALLET_ERROR = 'hd-wallet-error',\n\n  // errors\n  PARSE_FAILED = 'parse-failed',\n  ENCODE_ERROR = 'encode-error',\n  DECODE_ERROR = 'decode-error',\n  INVALID_CREDENTIALS = 'invalid-credentials',\n  ENV_DEPENDENCY_MISSING = 'env-dependency-missing',\n  INVALID_TTL = 'invalid-ttl',\n  INVALID_INPUT_PARAMETERS = 'invalid-input-parameters',\n  NOT_IMPLEMENTED = 'not-implemented',\n  NOT_SUPPORTED = 'not-supported',\n  CONVERTING_FAILED = 'converting-error',\n  ELEMENT_NOT_FOUND = 'element-not-found',\n  MISSING_REQUIRED_PARAMETER = 'missing-required-parameter',\n\n  // transaction\n  GAS_PRICE_TOO_LOW = 'gas-price-too-low',\n  GAS_LIMIT_TOO_LOW = 'gas-limit-too-low',\n  TRANSACTION_NOT_FOUND = 'transaction-not-found',\n  TRANSACTION_FAILED = 'transaction-failed',\n  INVALID_CONFIGURABLE_CONSTANTS = 'invalid-configurable-constants',\n  INVALID_TRANSACTION_INPUT = 'invalid-transaction-input',\n  INVALID_TRANSACTION_OUTPUT = 'invalid-transaction-output',\n  INVALID_TRANSACTION_STATUS = 'invalid-transaction-status',\n  INVALID_TRANSACTION_TYPE = 'invalid-transaction-type',\n  TRANSACTION_ERROR = 'transaction-error',\n\n  // receipt\n  INVALID_RECEIPT_TYPE = 'invalid-receipt-type',\n\n  // mnemonic\n  INVALID_WORD_LIST = 'invalid-word-list',\n  INVALID_MNEMONIC = 'invalid-mnemonic',\n  INVALID_ENTROPY = 'invalid-entropy',\n  INVALID_SEED = 'invalid-seed',\n  INVALID_CHECKSUM = 'invalid-checksum',\n\n  // wallet / account\n  INVALID_PASSWORD = 'invalid-password',\n  ACCOUNT_REQUIRED = 'account-required',\n\n  // chain\n  LATEST_BLOCK_UNAVAILABLE = 'latest-block-unavailable',\n  ERROR_BUILDING_BLOCK_EXPLORER_URL = 'error-building-block-explorer-url',\n\n  // docs\n  VITEPRESS_PLUGIN_ERROR = 'vitepress-plugin-error',\n\n  // contract\n  INVALID_MULTICALL = 'invalid-multicall',\n\n  // script\n  SCRIPT_REVERTED = 'script-reverted',\n  SCRIPT_RETURN_INVALID_TYPE = 'script-return-invalid-type',\n\n  // general\n  FUEL_NODE_ERROR = 'fuel-node-error',\n\n  // coder\n  // ...\n}\n","import { versions } from '@fuel-ts/versions';\n\nimport { ErrorCode } from './error-codes';\n\nexport class FuelError extends Error {\n  static readonly CODES = ErrorCode;\n  readonly VERSIONS = versions;\n\n  static parse(e: unknown) {\n    const error = e as FuelError;\n\n    if (error.code === undefined) {\n      throw new FuelError(\n        ErrorCode.PARSE_FAILED,\n        \"Failed to parse the error object. The required 'code' property is missing.\"\n      );\n    }\n\n    const enumValues = Object.values(ErrorCode);\n    const codeIsKnown = enumValues.includes(error.code);\n\n    if (!codeIsKnown) {\n      throw new FuelError(\n        ErrorCode.PARSE_FAILED,\n        `Unknown error code: ${error.code}. Accepted codes: ${enumValues.join(', ')}.`\n      );\n    }\n\n    return new FuelError(error.code, error.message);\n  }\n\n  code: ErrorCode;\n\n  constructor(code: ErrorCode, message: string) {\n    super(message);\n    this.code = code;\n    this.name = 'FuelError';\n  }\n\n  toObject() {\n    const { code, name, message, VERSIONS } = this;\n    return { code, name, message, VERSIONS };\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\n/**\n * Converts `some.string-value` into `SomeStringValue`.\n *\n * Examples:\n *  my-simple.test —— MySimpleTest\n *  myFile.ts —— MyFileTs\n *  my-abi.json —— MyAbiJson\n */\nexport const normalizeString = (str: string): string => {\n  const transformations: ((s: string) => string)[] = [\n    (s) => s.replace(/\\s+/g, '-'), // spaces to -\n    (s) => s.replace(/\\./g, '-'), // dots to -\n    (s) => s.replace(/_/g, '-'), // underscore to -\n    (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()), // delete '-' and capitalize the letter after them\n    (s) => s.replace(/-/g, ''), // delete any '-' left\n    (s) => s.replace(/^\\d+/, ''), // removes leading digits\n    (s) => s[0].toUpperCase() + s.slice(1), // capitalize first letter\n  ];\n\n  const output = transformations.reduce((s, t) => t(s), str);\n\n  if (output === '') {\n    const errMsg = `The provided string '${str}' results in an empty output after`.concat(\n      ` normalization, therefore, it can't normalize string.`\n    );\n    throw new FuelError(ErrorCode.PARSE_FAILED, errMsg);\n  }\n\n  return output;\n};\n","/**\n * Function to take a byte array and split into chunks of a given size\n *\n * @param bytes - The byte array to chunk\n * @param chunkSize - The size of each chunk\n * @returns An array of byte arrays of a specified size\n */\nexport const chunkAndPadBytes = (bytes: Uint8Array, chunkSize: number): Uint8Array[] => {\n  const chunks: Uint8Array[] = [];\n\n  for (let offset = 0; offset < bytes.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytes.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n\n  const lastChunk = chunks[chunks.length - 1];\n  const remainingBytes = bytes.length % chunkSize;\n  const paddedChunkLength = remainingBytes + ((8 - (remainingBytes % 8)) % 8);\n  const newChunk = lastChunk.slice(0, paddedChunkLength);\n  chunks[chunks.length - 1] = newChunk;\n\n  return chunks;\n};\n"],"mappings":"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","names":["ErrorCode"]}