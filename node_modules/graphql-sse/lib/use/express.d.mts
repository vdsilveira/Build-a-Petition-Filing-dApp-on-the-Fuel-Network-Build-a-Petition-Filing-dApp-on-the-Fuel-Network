import type { Request, Response } from 'express';
import { HandlerOptions as RawHandlerOptions, OperationContext } from '../handler.mjs';
/**
 * @category Server/express
 */
export interface RequestContext {
    res: Response;
}
/**
 * @category Server/express
 */
export type HandlerOptions<Context extends OperationContext = undefined> = RawHandlerOptions<Request, RequestContext, Context>;
/**
 * The ready-to-use handler for [express](https://expressjs.com).
 *
 * Errors thrown from the provided options or callbacks (or even due to
 * library misuse or potential bugs) will reject the handler or bubble to the
 * returned iterator. They are considered internal errors and you should take care
 * of them accordingly.
 *
 * For production environments, its recommended not to transmit the exact internal
 * error details to the client, but instead report to an error logging tool or simply
 * the console.
 *
 * ```ts
 * import express from 'express'; // yarn add express
 * import { createHandler } from 'graphql-sse/lib/use/express';
 * import { schema } from './my-graphql/index.mjs';
 *
 * const handler = createHandler({ schema });
 *
 * const app = express();
 *
 * app.use('/graphql/stream', async (req, res) => {
 *   try {
 *     await handler(req, res);
 *   } catch (err) {
 *     console.error(err);
 *     res.writeHead(500).end();
 *   }
 * });
 *
 * server.listen(4000);
 * console.log('Listening to port 4000');
 * ```
 *
 * @category Server/express
 */
export declare function createHandler<Context extends OperationContext = undefined>(options: HandlerOptions<Context>): (req: Request, res: Response) => Promise<void>;
